/* You can target elements by name/type */


/* list of colors
#11296b     #00509d     #ededed     #ffdb57     #ffcb05 */
body {
    background-color: #ededed;
}
ul {
    background-color: plum;
}

ol {
    background-color: goldenrod;
}

table, th, td {
    border: 1px solid black;
    padding: 5px;
    border-collapse: collapse;
}

/* You can target elements by class as well by preceding the class name with . */
.button h5 {
    background-color: #4CAF50; /* Green */
    border: none;
    color: rgb(120, 48, 48);
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
  }

.list-box {
    display: flex;
    justify-content: space-around;
    align-items: center;
}

/* You can target elements by id by preceding the id name with # */

.header{
    background-color: #11296b;
    color: #ededed;
    text-align: center;
    position: center;
    float: center;
    /* display: grid; */
    /* grid-template-columns: auto 1fr; */
    padding: 5% 29%;
}

.input-holder{
    display: grid;
    place-content: center;
    float: center;
    margin: 30px 30px;

}
#input1{
    float: center;
    border-radius: 10px;
    text-align: center;
    font-size: 20px;
    padding: 10px 80px;
}

#exampleFormBtn {
    background-color: #dddddd;
    border: none;
    color: #35506c;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 25x;
    border-radius: 8px;
    transition-duration: 0.4s;
    padding: 5px 10px;
    margin: 10px 10px;
}
#exampleFormBtn:hover {
    background-color: #dbdbdb;
    color: #00509d;
}



/*
    For buttons, you can style them differently based on if the mouse is hovering over them or not.
    This can be done using :hover after the button name.
*/


/*
    Feel free to mess around with the padding, border and margin here
    to see how the content is affected. You may notice the content's
    box change size (padding), the border getting thinner/thicker (border),
    and the distance between the two content boxes change (margin).
*/
#the-box {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    border: 5px solid black;
    background-color: gray;
}

#content1 {
    background-color: lightcoral;
    padding: 10px; 
    border: 10px dotted red;
    margin: 100px;
}

#content2 {
    background-color: lightgreen;
    padding: 5px;
    border: 5px dashed green;
    margin: 10px;
}

/* 
    Animations are one of the more advanced topics in CSS, but they can be simple
    enough to use for your ZotHacks project. The basic idea is that any element has an animation property
    where the animation can be applied to it. The property has 3 main subproperties we will focus on:
    name, duration, iteration. The name of the animation is defined by keyframes, which describes
    all the steps in the animation. Duration is how long each cycle of the animation lasts. Iteration
    is how long you want the animation to repeat.

    More info: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations
*/

#petr {
    height: 10%;
    width: 10%;
    animation: spin 0.5s infinite;
}

@keyframes spin {
    0%   { transform: rotate(0deg); }
    100%  { transform: rotate(360deg); }
}

.selected-button {
background-color: aqua !important;
}
